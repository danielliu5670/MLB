# -*- coding: utf-8 -*-
"""fine_tuning_project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1jeu9B5-fWlMd_yB3Nf_hiDLTj-P_gVto

## Loading data
"""

!wget --no-check-certificate \
    https://storage.googleapis.com/mledu-datasets/cats_and_dogs_filtered.zip \
    -O /tmp/cats_and_dogs_filtered.zip

import os
import zipfile

local_zip = '/tmp/cats_and_dogs_filtered.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

base_dir = '/tmp/cats_and_dogs_filtered'
train_dir = os.path.join(base_dir, 'train')
validation_dir = os.path.join(base_dir, 'validation')

"""## Reading the Data into arrays"""

from PIL import Image
import numpy as np

x_train = []
y_train = []

NUMBER_OF_EXAMPLES = 2000

cats_dir = os.path.join(train_dir, "cats")
dogs_dir = os.path.join(train_dir, "dogs")

i = 0
while i < NUMBER_OF_EXAMPLES:
    if i % 2 == 0:
        im = Image.open(os.path.join(cats_dir, os.listdir(cats_dir)[i//2])).convert("RGB")
        im_resized = im.resize((150, 150))  # Resize to match model input
        x_train.append(np.array(im_resized))
        y_train.append(1)
    else:
        im = Image.open(os.path.join(dogs_dir, os.listdir(dogs_dir)[i//2])).convert("RGB")
        im_resized = im.resize((150, 150))  # Resize to match model input
        x_train.append(np.array(im_resized))
        y_train.append(0)
    i += 1

x_train = np.array(x_train)
y_train = np.array(y_train)

x_train = x_train / 255.0

"""## Beginning to define the model (this is where you come in, I loaded the pretrained model for you)"""

import tensorflow as tf

pretrained_model = tf.keras.applications.ResNet50(
    include_top=False,
    input_shape=(150, 150, 3),
    pooling='avg',
    classes=2,
    weights='imagenet'
)

pretrained_model.trainable = False

# create model
model = tf.keras.Sequential([
    pretrained_model,
    tf.keras.layers.Dense(1, activation='sigmoid')
])

model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)

# train
history = model.fit(
    x_train,
    y_train,
    epochs=10,
    batch_size=32
)